{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"express\"","webpack:///external commonjs \"body-parser\"","webpack:///external commonjs \"cookie-parser\"","webpack:///external commonjs \"cors\"","webpack:///external commonjs \"mongoose\"","webpack:///external commonjs \"bcrypt\"","webpack:///external commonjs \"http\"","webpack:///external commonjs \"socket.io\"","webpack:///external commonjs \"jsonwebtoken\"","webpack:///./src/models/User.ts","webpack:///./src/models/ChatRooms.ts","webpack:///./src/models/Message.ts","webpack:///./src/routes/chatRoomRoute.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"express\");","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"mongoose\");","module.exports = require(\"bcrypt\");","module.exports = require(\"http\");","module.exports = require(\"socket.io\");","module.exports = require(\"jsonwebtoken\");","import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Define the interface for a user document\nexport interface IUser extends Document {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n}\n\n// Define the schema for users\nconst userSchema: Schema<IUser> = new Schema({\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  email: { type: String, required: true },\n  password: { type: String, required: true },\n});\n\n// Create the User model\nconst User: Model<IUser> = mongoose.model<IUser>('User', userSchema);\n\nexport default User;","import mongoose, { Document, Schema, Model } from 'mongoose';\nimport { IUser } from './User'; // Import the IUser interface for user references\nimport { IMessage } from './Message';\n\nexport interface IChatRoom extends Document {\n  name: string;\n  description: string;\n  messages: IMessage[]; // Store messages as an array of references to Message documents\n  users: mongoose.Types.ObjectId[]; \n}\n\nconst chatRoomSchema: Schema<IChatRoom> = new Schema({\n  name: String,\n  description: String,\n  messages: [{ type: Schema.Types.ObjectId, ref: 'Message' }], // Reference to Message documents\n  users: [{ type: Schema.Types.ObjectId, ref: 'User' }], // Reference to User documents\n});\n\nconst ChatRoom: Model<IChatRoom> = mongoose.model<IChatRoom>('ChatRoom', chatRoomSchema);\n\nexport default ChatRoom;\n\n","import mongoose, { Document, Schema, Model } from 'mongoose';\nimport { IUser } from './User'; // Import the IUser interface for user references\nimport { IChatRoom } from './ChatRooms';\n\nexport interface IMessage extends Document {\n  senderInfo: IUser; // Reference to the sender's User document\n  text: string;\n  timestamp: Date;\n  chatRoomId: IChatRoom; // Reference to the ChatRoom document\n  systemMessage: boolean;\n}\n\nconst messageSchema: Schema<IMessage> = new Schema({\n  senderInfo: { type: Schema.Types.ObjectId, ref: 'User' }, // Reference to User documents\n  text: String,\n  timestamp: { type: Date, default: Date.now },\n  chatRoomId: { type: mongoose.Schema.Types.ObjectId, ref: 'ChatRoom' },\n  systemMessage: { type: Boolean, default: false }\n});\n\nconst Message: Model<IMessage> = mongoose.model<IMessage>('Message', messageSchema);\n\nexport default Message;\n\n\n","import express, { Request, Response, Router } from 'express';\nimport mongoose from 'mongoose';\n\nimport ChatRoom, { IChatRoom } from '../models/ChatRooms';\nimport Message from '../models/Message';\nimport User,{IUser} from '../models/User'\nimport jwt from 'jsonwebtoken';\n\nconst ObjectId = mongoose.Types.ObjectId;\n\nconst router: Router = express.Router();\n\n// Create a new chat room\nrouter.post('/chatrooms', async (req: Request, res: Response) => {\n  try {\n    const { name, description, users }: IChatRoom = req.body;\n    const newRoom = new ChatRoom({ name, description });\n    await newRoom.save();\n    \n    const roomId: string = newRoom._id.toString();\n    const userId: string = users[0]._id.toString();\n    const user = await User.findById(userId);\n    const firstName: string = user?.firstName.toString();\n    const lastName: string = user?.lastName.toString();\n    const createRoomMessage = new Message({\n      senderInfo: userId, // Reference to the user who joined\n      text: `${firstName} ${lastName} has created a chat.`,\n      chatRoomId: roomId, // Reference to the chat room\n      systemMessage: true, // Set as a system message\n    });\n    // Save the updated chat room\n    await Promise.all([ createRoomMessage.save()]);\n\n    // Optionally, you can send back the updated chat room data to the client\n    res.status(200).json({ message: 'Successfully created the chat room', newRoom });\n    //res.status(201).json(newRoom);\n  } catch (error) {\n    res.status(500).json({ error: 'Error creating chat room' });\n  }\n});\n\n// Get all chat rooms\nrouter.get('/chatrooms', async (req: Request, res: Response) => {\n  try {\n    const chatRooms: IChatRoom[] = await ChatRoom.find().populate('users').exec();\n    res.json(chatRooms);\n  } catch (error) {\n    res.status(500).json({ error: 'Error fetching chat rooms' });\n  }\n});\n\nconst secret = \"SECRET_1234\";\n\n\n// Get a specific chat room by ID\nrouter.get('/chatrooms/:id', async (req: Request, res: Response) => {\n  try {\n    const roomId: string = req.params.id;\n    const chatRoom: IChatRoom | null = await ChatRoom.findById(roomId);\n    if (!chatRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n    res.json(chatRoom);\n  } catch (error) {\n    res.status(500).json({ error: 'Error fetching chat room' });\n  }\n});\n\n\nrouter.get('/chatroom/:roomId/messages', async (req, res) => {\n  const roomId = req.params.roomId;\n  if (!ObjectId.isValid(roomId)) {\n    return res.status(400).json({ error: 'Invalid roomId format' });\n  }\n  try {\n    // Use MongoDB aggregation to join messages with user names and additional attributes\n    const messages = await Message.aggregate([\n      {\n        $match: { chatRoomId: new mongoose.Types.ObjectId(roomId) }\n      },\n      {\n        $lookup: {\n          from: 'users', // Assuming your user collection is named 'users'\n          localField: 'senderInfo',\n          foreignField: '_id',\n          as: 'senderInfo'\n        }\n      },\n      {\n        $unwind: '$senderInfo'\n      },\n      {\n        $project: {\n          text: 1,\n          timestamp: 1,\n          'senderInfo.firstName': 1,\n          'senderInfo.lastName': 1,\n          'senderInfo._id': 1,\n          'systemMessage': 1, \n        }\n      }\n    ]);\n\n    // Fetch the chat room and its users\n    const chatRoom: IChatRoom | null = await ChatRoom.findById(roomId)\n      .populate('users','-password') // Populate the 'users' field with user documents\n      .exec();\n\n    if (!chatRoom) {\n      throw new Error('Chat room not found');\n    }\n\n    \n    const userObjectIds: mongoose.Types.ObjectId[] = [];\n\n    // Iterate through users and add their IDs to the array\n    chatRoom.users.forEach((userObjectId) => {\n      userObjectIds.push(userObjectId);\n    });\n\n    // Optionally, fetch additional attributes for users here\n    const usersWithAdditionalAttributes: IUser[] = await User.find({\n      _id: { $in: userObjectIds }, // Filter users by their IDs\n    });\n\n   \n    res.json({\n      chatRoomName: chatRoom.name,\n      chatRoomUsers: usersWithAdditionalAttributes,\n      messages\n    });\n  } catch (error) {\n    console.error('Error fetching chat room messages:', error);\n    res.status(500).json({ error: 'Failed to fetch chat room messages' });\n  }\n});\n\nrouter.post('/join/:roomId', async (req: Request, res: Response) => {\n  const roomId: string = req.params.roomId;\n  const token: string | undefined = req.headers.authorization;;\n  const {firstName, lastName} =  req.body\n  if (!token) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  try {\n    // Verify the user's token and get user information\n    const userInfo: { id: string , firstName: string, lastName: string, email: string, password: string} = \n    jwt.verify(token, secret) as { id: string , firstName: string, lastName: string, email: string, password: string};\n\n    //console.log(JSON.stringify(userInfo))\n    // Find the chat room by ID\n    const chatRoom: IChatRoom | null = await ChatRoom.findById(roomId);\n\n    if (!chatRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n\n    // Check if the user is already a participant in the chat room\n    const userId: string = userInfo.id.toString();\n    const userIsParticipant: boolean = chatRoom.users.some((user) => user.toString() === userId);\n\n\n    if (userIsParticipant) {\n      return res.status(400).json({ error: 'User is already in the chat room' });\n    }\n    const userIdObject = new mongoose.Types.ObjectId(userId);\n     // Add the user's ID to the chat room's participants list\n     chatRoom.users.push(userIdObject);\n\n    const joinMessage = new Message({\n      senderInfo: userInfo.id, // Reference to the user who joined\n      text: `${firstName} ${lastName} has joined the chat.`,\n      chatRoomId: roomId, // Reference to the chat room\n      systemMessage: true, // Set as a system message\n    });\n    // Save the updated chat room\n    await Promise.all([chatRoom.save(), joinMessage.save()]);\n\n    // Optionally, you can send back the updated chat room data to the client\n    res.status(200).json({ message: 'Successfully joined the chat room', chatRoom });\n  } catch (error) {\n    console.error('Error joining chat room:', error);\n    res.status(500).json({ error: 'Failed to join the chat room' });\n  }\n});\n\nrouter.post('/leave/:roomId', async (req, res) => {\n  const { roomId } = req.params;\n  const token: string | undefined = req.headers.authorization;;\n  const {firstName, lastName} =  req.body\n  if (!token) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  try {\n    // Remove the user from the chat room in the database\n    // For example, if you have a \"chatRoom\" model, you can use Mongoose to update it\n    // Update the database to remove the user from the room's user list\n    const userInfo: { id: string , firstName: string, lastName: string, email: string, password: string} = jwt.verify(token, secret) as { id: string , firstName: string, lastName: string, email: string, password: string};\n    //console.log(JSON.stringify(userInfo))\n    const chatRoom: IChatRoom | null = await ChatRoom.findById(roomId);\n\n    if (!chatRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n\n    // Check if the user is a participant in the chat room\n    const userId: string = userInfo.id.toString();\n    const userIndex: number = chatRoom.users.findIndex((user) => user.toString() === userId);\n\n    if (userIndex === -1) {\n      return res.status(400).json({ error: 'User is not in the chat room' });\n    }\n\n    chatRoom.users.splice(userIndex, 1);\n\n   \n    const leaveMessage = new Message({\n      senderInfo: userInfo.id, \n      text: `${firstName} ${lastName} has left the chat.`,\n      chatRoomId: roomId, \n      systemMessage: true, \n    });\n\n    \n    await Promise.all([chatRoom.save(), leaveMessage.save()]);\n\n    res.status(200).json({ message: 'Successfully left the chat room' });\n  } catch (error) {\n    console.error('Error leaving chat room:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\n// Update a chat room by ID\nrouter.put('/chatrooms/:id', async (req: Request, res: Response) => {\n  try {\n    const roomId: string = req.params.id;\n    const { name, description, users }: IChatRoom = req.body;\n    const updatedRoom: IChatRoom | null = await ChatRoom.findByIdAndUpdate(\n      roomId,\n      { name, description, users },\n      { new: true }\n    );\n    if (!updatedRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n    res.json(updatedRoom);\n  } catch (error) {\n    res.status(500).json({ error: 'Error updating chat room' });\n  }\n});\n\n// Delete a chat room by ID\nrouter.delete('/chatrooms/:id', async (req: Request, res: Response) => {\n  try {\n    const roomId: string = req.params.id;\n    const deletedRoom: IChatRoom | null = await ChatRoom.findByIdAndDelete(roomId);\n    if (!deletedRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n    res.json({ message: 'Chat room deleted' });\n  } catch (error) {\n    res.status(500).json({ error: 'Error deleting chat room' });\n  }\n});\n\nexport default router;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport express from 'express';\nimport * as path from 'path';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport mongoose, { ConnectOptions } from \"mongoose\";\nimport bcrypt from 'bcrypt';\nimport * as http from 'http';\nimport { Server as SocketIO } from \"socket.io\";\n\nimport jwt from 'jsonwebtoken';\n\nimport User from './models/User';\nimport ChatRoom from './models/ChatRooms';\nimport Message from './models/Message'\n\n\nimport ChatRoomRoutes from './routes/chatRoomRoute';\n\ninterface UserInfo {\n  id: string;\n  // Other properties...\n}\n\nconst app = express();\nconst server = http.createServer(app);\nconst io:SocketIO = new SocketIO(server, {\n  cors: {\n    origin: 'http://localhost:4200',\n    methods: ['GET', 'POST'],\n  },\n  pingInterval: 10000, // Interval between pings (e.g., 10 seconds)\n  pingTimeout: 5000,  \n});\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({extended:true}));\napp.use(bodyParser.json());\napp.use(cors({\n  origin: 'http://localhost:4200',\n  credentials: true\n}));\n\n// const uri = \"mongodb+srv://admin:admin1234@cluster0.byt74xc.mongodb.net/?retryWrites=true&w=majority\";\n\n//app.use('/assets', express.static(path.join(__dirname, 'assets')));\n\nconst MONGO_URI = \"mongodb+srv://admin:admin1234@cluster0.byt74xc.mongodb.net/?retryWrites=true&w=majority\";\nmongoose.connect(MONGO_URI,  {} )\n\nconst db = mongoose.connection;\ndb.on(\"error\", console.error.bind(console, \"connection error: \"));\n\napp.get('/api/test', (req, res ) => {\n  res.send({ message: 'Welcome to server!' });\n});\nconst secret = \"SECRET_1234\";\n\napp.get('/api/user',(req, res)=>{\n\n  //const token = req.cookies.token;\n  const token = req.headers.authorization;\n  //console.log(\"decoded\",token)\n   \n  const userInfo: UserInfo = jwt.verify(token, secret) as UserInfo;\n  // console.log(\"decoded\",userInfo)\n    \n      User.findById(userInfo.id)\n      .then((user) => {const{_id,email, firstName, lastName} = user; res.json({_id,email, firstName, lastName})})\n      .catch((err) =>{\n        console.log(err);\n        res.sendStatus(500)\n      })\n  \n});\n\napp.post('/api/register', (req,res) =>{\n  const {email, firstName, lastName} =  req.body;\n  //console.log(req.body);\n  const password = bcrypt.hashSync(req.body.password, 10);\n\n  const user = new User({email, firstName, lastName, password});\n\n  user.save().then((user) =>{\n\n   jwt.sign({id:user._id}, secret, (err,token) =>{\n    if(err){\n      console.log(err)\n      res.sendStatus(500)\n    }else{\n      // res.status(201).cookie('token', token).send();\n      const {firstName,lastName, email, _id} = user;\n      res.status(201).json({_id,email, firstName, lastName,token});\n    }\n   });\n  }).catch(e =>{\n    console.log(e)\n    res.sendStatus(500)\n  })\n});\n\napp.post('/api/login', (req,res)=>{\n  const {email, password} = req.body;\n\n  User.findOne({email}).then(user => {\n    if(user && user.email){\n      const passOk = bcrypt.compareSync(password, user.password);\n      // res.json({passOk});\n      if(passOk){\n        jwt.sign({id:user._id}, secret, (err, token)=>{\n          const {firstName,lastName, email, _id} = user;\n          const responseData = {\n            message: \"Login successful\",\n            data: {firstName,lastName, email,_id}\n           \n          };\n          res.cookie('token',token);\n          \n          res.status(200).json({_id,email, firstName, lastName,token});\n          //res.json({_id,email, firstName, lastName})\n        })\n      }else{\n        res.sendStatus(422).json(\"Invalid Username or password\");\n    \n      }\n    }else{\n      res.sendStatus(422).json(\"Invalid Username or password\");\n    }\n  })\n});\n\n// Use chat room routes\napp.use('/api', ChatRoomRoutes);\n\nconst port = process.env.PORT || 3333;\nserver.listen(port, () => {\n  console.log(`Listening at http://localhost:${port}/api`);\n});\nserver.on('error', console.error);\n\n\nconst activeUsers = new Map();\n\n\nio.on('connection', (socket) => {\n  socket.emit('connectionStatus', 'active');\n  console.log(`User connected: ${socket.id}`);\n  // When a user joins a specific chat room, emit a message to that room\n  socket.on('joinRoom', async (chatRoomId,user) => {\n    socket.join(chatRoomId);\n    console.log(`${user.firstName} ${user.lastName} has joined the chat room - ${chatRoomId}.`);\n    try {\n      // Use MongoDB aggregation to join messages with user names\n      const messages = await Message.aggregate([\n        {\n          $match: { chatRoomId: new mongoose.Types.ObjectId(chatRoomId) }\n        },\n        {\n          $lookup: {\n            from: 'users', // Assuming your user collection is named 'users'\n            localField: 'senderInfo',\n            foreignField: '_id',\n            as: 'senderInfo'\n          }\n        },\n        {\n          $unwind: '$senderInfo'\n        },\n        {\n          $project: {\n            text: 1,\n            timestamp: 1,\n            'senderInfo.firstName': 1,\n            'senderInfo.lastName': 1,\n            'senderInfo._id':1,\n            'systemMessage': 1, \n          }\n        }\n      ]);\n  \n      socket.to(chatRoomId).emit('systemMessage', messages);\n      \n    } catch (error) {\n      console.error('Error fetching chat room messages:', error);\n      // res.status(500).json({ error: 'Failed to fetch chat room messages' });\n    }\n    \n\n    activeUsers.set(socket.id, { chatRoomId: chatRoomId, user });\n  });\n\n  socket.on('leaveRoom', async (chatRoomId,user,) => {\n    // const userData = activeUsers.get(socket.id);\n    // socket.leave(chatRoomId);\n    // console.log(`${user.firstName} ${user.lastName} has left the chat room.`);\n    // io.to(chatRoomId).emit('systemMessage', `${user.firstName} ${user.lastName} has left the chat.`);\n\n    // // Remove the user from the 'users' Map\n    // activeUsers.delete(socket.id);\n    // if (userData) {\n    //   const { user } = userData;\n      \n      // socket.leave(chatRoomId);\n      console.log(`${user.firstName} ${user.lastName} has left the chat room.`);\n      \n      try {\n        // Use MongoDB aggregation to join messages with user names\n        const messages = await Message.aggregate([\n          {\n            $match: { chatRoomId: new mongoose.Types.ObjectId(chatRoomId) }\n          },\n          {\n            $lookup: {\n              from: 'users', // Assuming your user collection is named 'users'\n              localField: 'senderInfo',\n              foreignField: '_id',\n              as: 'senderInfo'\n            }\n          },\n          {\n            $unwind: '$senderInfo'\n          },\n          {\n            $project: {\n              text: 1,\n              timestamp: 1,\n              'senderInfo.firstName': 1,\n              'senderInfo.lastName': 1,\n              'senderInfo._id':1,\n              'systemMessage': 1, \n            }\n          }\n        ]);\n    \n        socket.to(chatRoomId).emit('systemMessage', messages);\n        console.log(`Emitting ${JSON.stringify(messages)}to chatRoom - ${chatRoomId} as systemMessage`)\n        \n      } catch (error) {\n        console.error('Error fetching chat room messages:', error);\n        // res.status(500).json({ error: 'Failed to fetch chat room messages' });\n      }\n      // Remove the user from the 'activeUsers' Map\n      socket.leave(chatRoomId);\n      activeUsers.delete(socket.id);\n    // }\n  });\n  \n  \n  socket.on('chatMessage', async (chatRoomId, user, messageText) => {\n    socket.join(chatRoomId);\n    try {\n      // Ensure that the message object contains necessary properties\n      if (!chatRoomId || !user || !messageText) {\n        console.error('Invalid message received:', {chatRoomId, user, messageText});\n        return;\n      }\n      // const message = data.message\n      console.log(`Received message from ${JSON.stringify(user)} in room ${chatRoomId}: ${messageText}`);\n\n      // Create a new message instance\n      const newMessage = new Message({\n        senderInfo: user,\n        text: messageText,\n        chatRoomId: chatRoomId\n      });\n\n      // Save the message to the database\n      await newMessage.save();\n      console.log('Message saved to the database');\n      //socket.join(message.chatRoomId)\n      // Broadcast the message to all connected clients\n      try {\n        // Use MongoDB aggregation to join messages with user names\n        const messages = await Message.aggregate([\n          {\n            $match: { chatRoomId: new mongoose.Types.ObjectId(chatRoomId) }\n          },\n          {\n            $lookup: {\n              from: 'users', // Assuming your user collection is named 'users'\n              localField: 'senderInfo',\n              foreignField: '_id',\n              as: 'senderInfo'\n            }\n          },\n          {\n            $unwind: '$senderInfo'\n          },\n          {\n            $project: {\n              text: 1,\n              timestamp: 1,\n              'senderInfo.firstName': 1,\n              'senderInfo.lastName': 1,\n              'senderInfo._id':1,\n              'systemMessage': 1, \n            }\n          }\n        ]);\n    \n        // Optionally, you can also fetch the chat room name\n        const chatRoom = await ChatRoom.findById(chatRoomId, 'name');\n        console.log(`Recent message - ${JSON.stringify(messages[messages.length -1])} in room ${chatRoomId}`)\n        socket.to(chatRoomId).emit('receive_message', messages);\n      } catch (error) {\n        console.error('Error fetching chat room messages:', error);\n        // res.status(500).json({ error: 'Failed to fetch chat room messages' });\n      }\n     \n    } catch (error) {\n      console.error('Error handling message:', error);\n    }\n    \n  });\n   // Handle 'pong' messages\n   socket.on('pong', () => {\n    // You can optionally log or perform actions upon receiving a 'pong' message.\n    console.log(\"ping pong connection on\")\n  });\n  // Handle disconnections\n  socket.on('disconnect', () => {\n    console.log(`User disconnected: ${socket.id}`);\n    socket.emit('connectionStatus', 'disconnected');\n    const userData = activeUsers.get(socket.id);\n\n    // console.log(`User disconnected: ${socket.id}`);\n    // io.to(chatRoomId).emit('systemMessage', `${user.firstName} ${user.lastName} has left the chat.`);\n    // socket.leave(chatRoomId);\n    // activeUsers.delete(socket.id);\n    if (userData) {\n      const { roomId, user } = userData;\n\n      // Remove the user from the 'activeUsers' Map\n      activeUsers.delete(socket.id);\n\n      // Emit a system message to notify other users when someone disconnects\n      io.to(roomId).emit('systemMessage', `${user.firstName} ${user.lastName} has left the chat.`);\n\n      // Leave the room\n      socket.leave(roomId);\n    }\n\n    \n  });\n});"],"names":[],"sourceRoot":""}