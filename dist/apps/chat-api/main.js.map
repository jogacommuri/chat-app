{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"express\"","webpack:///external commonjs \"body-parser\"","webpack:///external commonjs \"cookie-parser\"","webpack:///external commonjs \"cors\"","webpack:///external commonjs \"mongoose\"","webpack:///external commonjs \"bcrypt\"","webpack:///external commonjs \"http\"","webpack:///external commonjs \"socket.io\"","webpack:///external commonjs \"jsonwebtoken\"","webpack:///./src/models/User.ts","webpack:///./src/models/Message.ts","webpack:///./src/routes/chatRoomRoute.ts","webpack:///./src/models/ChatRooms.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","module.exports = require(\"express\");","module.exports = require(\"body-parser\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"mongoose\");","module.exports = require(\"bcrypt\");","module.exports = require(\"http\");","module.exports = require(\"socket.io\");","module.exports = require(\"jsonwebtoken\");","import mongoose, { Document, Model, Schema } from 'mongoose';\n\n// Define the interface for a user document\nexport interface IUser extends Document {\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n}\n\n// Define the schema for users\nconst userSchema: Schema<IUser> = new Schema({\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  email: { type: String, required: true },\n  password: { type: String, required: true },\n});\n\n// Create the User model\nconst User: Model<IUser> = mongoose.model<IUser>('User', userSchema);\n\nexport default User;","import mongoose, { Document, Schema, Model } from 'mongoose';\nimport { IUser } from './User'; // Import the IUser interface for user references\nimport { IChatRoom } from './ChatRooms';\n\nexport interface IMessage extends Document {\n  senderInfo: IUser; // Reference to the sender's User document\n  text: string;\n  timestamp: Date;\n  chatRoomId: IChatRoom; // Reference to the ChatRoom document\n}\n\nconst messageSchema: Schema<IMessage> = new Schema({\n  senderInfo: { type: Schema.Types.ObjectId, ref: 'User' }, // Reference to User documents\n  text: String,\n  timestamp: { type: Date, default: Date.now },\n  chatRoomId: { type: mongoose.Schema.Types.ObjectId, ref: 'ChatRoom' }, // Reference to the ChatRoom document\n});\n\nconst Message: Model<IMessage> = mongoose.model<IMessage>('Message', messageSchema);\n\nexport default Message;\n\n\n","import express, { Request, Response, Router } from 'express';\nimport mongoose from 'mongoose';\n\nimport ChatRoom, { IChatRoom } from '../models/ChatRooms';\nimport Message from '../models/Message';\n\nimport jwt from 'jsonwebtoken';\n\n\nconst router: Router = express.Router();\n\n// Create a new chat room\nrouter.post('/chatrooms', async (req: Request, res: Response) => {\n  try {\n    const { name, description, users }: IChatRoom = req.body;\n    const newRoom = new ChatRoom({ name, description, users });\n    await newRoom.save();\n    res.status(201).json(newRoom);\n  } catch (error) {\n    res.status(500).json({ error: 'Error creating chat room' });\n  }\n});\n\n// Get all chat rooms\nrouter.get('/chatrooms', async (req: Request, res: Response) => {\n  try {\n    const chatRooms: IChatRoom[] = await ChatRoom.find().populate('users').exec();\n    res.json(chatRooms);\n  } catch (error) {\n    res.status(500).json({ error: 'Error fetching chat rooms' });\n  }\n});\nconst secret = \"SECRET_1234\";\nrouter.post('/join/:roomId', async (req: Request, res: Response) => {\n  const roomId: string = req.params.roomId;\n  const token: string | undefined = req.cookies.token;\n\n  if (!token) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n\n  try {\n    // Verify the user's token and get user information\n    const userInfo: { id: string , firstName: string, lastName: string, email: string, password: string} = jwt.verify(token, secret) as { id: string , firstName: string, lastName: string, email: string, password: string};\n\n    // Find the chat room by ID\n    const chatRoom: IChatRoom | null = await ChatRoom.findById(roomId);\n\n    if (!chatRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n\n    // Check if the user is already a participant in the chat room\n    const userId: string = userInfo.id.toString();\n    const userIsParticipant: boolean = chatRoom.users.some((user) => user.toString() === userId);\n\n\n    if (userIsParticipant) {\n      return res.status(400).json({ error: 'User is already in the chat room' });\n    }\n    const userIdObject = new mongoose.Types.ObjectId(userId);\n     // Add the user's ID to the chat room's participants list\n     chatRoom.users.push(userIdObject);\n\n    // Save the updated chat room\n    await chatRoom.save();\n\n    // Optionally, you can send back the updated chat room data to the client\n    res.status(200).json({ message: 'Successfully joined the chat room', chatRoom });\n  } catch (error) {\n    console.error('Error joining chat room:', error);\n    res.status(500).json({ error: 'Failed to join the chat room' });\n  }\n});\n// Get a specific chat room by ID\nrouter.get('/chatrooms/:id', async (req: Request, res: Response) => {\n  try {\n    const roomId: string = req.params.id;\n    const chatRoom: IChatRoom | null = await ChatRoom.findById(roomId);\n    if (!chatRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n    res.json(chatRoom);\n  } catch (error) {\n    res.status(500).json({ error: 'Error fetching chat room' });\n  }\n});\n// Get chat messages for a specific chat room\nrouter.get('/chatroom/:roomId/messages', async (req, res) => {\n  const roomId = req.params.roomId;\n\n  try {\n    // Use MongoDB aggregation to join messages with user names\n    const messages = await Message.aggregate([\n      {\n        $match: { chatRoomId: new mongoose.Types.ObjectId(roomId) }\n      },\n      {\n        $lookup: {\n          from: 'users', // Assuming your user collection is named 'users'\n          localField: 'senderInfo',\n          foreignField: '_id',\n          as: 'senderInfo'\n        }\n      },\n      {\n        $unwind: '$senderInfo'\n      },\n      {\n        $project: {\n          text: 1,\n          timestamp: 1,\n          'senderInfo.firstName': 1,\n          'senderInfo.lastName': 1,\n          'senderInfo._id':1\n        }\n      }\n    ]);\n\n    // Optionally, you can also fetch the chat room name\n    const chatRoom = await ChatRoom.findById(roomId, 'name');\n\n    res.json({\n      chatRoomName: chatRoom.name,\n      messages\n    });\n  } catch (error) {\n    console.error('Error fetching chat room messages:', error);\n    res.status(500).json({ error: 'Failed to fetch chat room messages' });\n  }\n});\n\n// Update a chat room by ID\nrouter.put('/chatrooms/:id', async (req: Request, res: Response) => {\n  try {\n    const roomId: string = req.params.id;\n    const { name, description, users }: IChatRoom = req.body;\n    const updatedRoom: IChatRoom | null = await ChatRoom.findByIdAndUpdate(\n      roomId,\n      { name, description, users },\n      { new: true }\n    );\n    if (!updatedRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n    res.json(updatedRoom);\n  } catch (error) {\n    res.status(500).json({ error: 'Error updating chat room' });\n  }\n});\n\n// Delete a chat room by ID\nrouter.delete('/chatrooms/:id', async (req: Request, res: Response) => {\n  try {\n    const roomId: string = req.params.id;\n    const deletedRoom: IChatRoom | null = await ChatRoom.findByIdAndDelete(roomId);\n    if (!deletedRoom) {\n      return res.status(404).json({ error: 'Chat room not found' });\n    }\n    res.json({ message: 'Chat room deleted' });\n  } catch (error) {\n    res.status(500).json({ error: 'Error deleting chat room' });\n  }\n});\n\nexport default router;\n","import mongoose, { Document, Schema, Model } from 'mongoose';\nimport { IUser } from './User'; // Import the IUser interface for user references\nimport { IMessage } from './Message';\n\nexport interface IChatRoom extends Document {\n  name: string;\n  description: string;\n  messages: IMessage[]; // Store messages as an array of references to Message documents\n  users: mongoose.Types.ObjectId[]; \n}\n\nconst chatRoomSchema: Schema<IChatRoom> = new Schema({\n  name: String,\n  description: String,\n  messages: [{ type: Schema.Types.ObjectId, ref: 'Message' }], // Reference to Message documents\n  users: [{ type: Schema.Types.ObjectId, ref: 'User' }], // Reference to User documents\n});\n\nconst ChatRoom: Model<IChatRoom> = mongoose.model<IChatRoom>('ChatRoom', chatRoomSchema);\n\nexport default ChatRoom;\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport express from 'express';\nimport * as path from 'path';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport cors from 'cors';\nimport mongoose, { ConnectOptions } from \"mongoose\";\nimport bcrypt from 'bcrypt';\nimport * as http from 'http';\nimport { Server as SocketIO } from \"socket.io\";\n\nimport jwt from 'jsonwebtoken';\n\nimport User from './models/User';\nimport ChatRoom from './models/ChatRooms';\nimport Message from './models/Message'\n\n\nimport ChatRoomRoutes from './routes/chatRoomRoute';\nconst app = express();\nconst server = http.createServer(app);\nconst io:SocketIO = new SocketIO(server, {\n  cors: {\n    origin: 'http://localhost:4200',\n    methods: ['GET', 'POST'],\n  },\n  pingInterval: 10000, // Interval between pings (e.g., 10 seconds)\n  pingTimeout: 5000,  \n});\n\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({extended:true}));\napp.use(bodyParser.json());\napp.use(cors({\n  origin: 'http://localhost:4200',\n  credentials: true\n}));\n\n// const uri = \"mongodb+srv://admin:admin1234@cluster0.byt74xc.mongodb.net/?retryWrites=true&w=majority\";\n\n//app.use('/assets', express.static(path.join(__dirname, 'assets')));\n\nconst MONGO_URI = \"mongodb+srv://admin:admin1234@cluster0.byt74xc.mongodb.net/?retryWrites=true&w=majority\";\nmongoose.connect(MONGO_URI,  {} )\n\nconst db = mongoose.connection;\ndb.on(\"error\", console.error.bind(console, \"connection error: \"));\n\napp.get('/api/test', (req, res ) => {\n  res.send({ message: 'Welcome to server!' });\n});\nconst secret = \"SECRET_1234\";\n\napp.get('/api/user',(req, res)=>{\n\n  const token = req.cookies.token;\n  // console.log(\"decoded\",token)\n   \n  const userInfo = jwt.verify(token, secret)\n  // console.log(\"decoded\",userInfo)\n    \n      User.findById(userInfo.id)\n      .then((user) => {const{_id,email, firstName, lastName} = user; res.json({_id,email, firstName, lastName})})\n      .catch((err) =>{\n        console.log(err);\n        res.sendStatus(500)\n      })\n  \n});\n\napp.post('/api/register', (req,res) =>{\n  const {email, firstName, lastName} =  req.body;\n  console.log(req.body);\n  const password = bcrypt.hashSync(req.body.password, 10);\n\n  const user = new User({email, firstName, lastName, password});\n\n  user.save().then((user) =>{\n\n   jwt.sign({id:user._id}, secret, (err,token) =>{\n    if(err){\n      console.log(err)\n      res.sendStatus(500)\n    }else{\n      res.status(201).cookie('token', token).send();\n    }\n   });\n  }).catch(e =>{\n    console.log(e)\n    res.sendStatus(500)\n  })\n});\n\napp.post('/api/login', (req,res)=>{\n  const {email, password} = req.body;\n\n  User.findOne({email}).then(user => {\n    if(user && user.email){\n      const passOk = bcrypt.compareSync(password, user.password);\n      // res.json({passOk});\n      if(passOk){\n        jwt.sign({id:user._id}, secret, (err, token)=>{\n          const {firstName,lastName, email} = user;\n          const responseData = {\n            message: \"Login successful\",\n            data: {firstName,lastName, email}\n            // Add any other data you want to send\n          };\n          res.cookie('token',token);\n          \n          res.status(200).json(responseData)\n        })\n      }else{\n        res.sendStatus(422).json(\"Invalid Username or password\");\n    \n      }\n    }else{\n      res.sendStatus(422).json(\"Invalid Username or password\");\n    }\n  })\n});\n\n// Use chat room routes\napp.use('/api', ChatRoomRoutes);\n\nconst port = process.env.PORT || 3333;\nserver.listen(port, () => {\n  console.log(`Listening at http://localhost:${port}/api`);\n});\nserver.on('error', console.error);\n\n\nconst onlineUsers: Map<string, string> = new Map();\n\nio.on('connection', (socket) => {\n  console.log(`User connected: ${socket.id}`);\n\n  global.chatSocket = socket;\n  socket.on(\"add-user\", (userId) =>{\n    onlineUsers.set(userId, socket.id)\n  })\n  socket.on(\"send-msg\", (data: { to: string; msg: string }) => {\n    const sendUserSocket = onlineUsers.get(data.to);\n    if (sendUserSocket) {\n      socket.to(sendUserSocket).emit(\"msg-recieve\", data.msg);\n    }\n  });\n  \n  socket.on('chatMessage', async (data) => {\n    try {\n      // Ensure that the message object contains necessary properties\n      if (!data.message || !data.message.senderInfo || !data.message.chatRoomId || !data.message.text) {\n        console.error('Invalid message received:', data.message);\n        return;\n      }\n      const message = data.message\n      console.log(`Received message from ${JSON.stringify(message.senderInfo)} in room ${message.chatRoomId}: ${message.text}`);\n\n      // Create a new message instance\n      const newMessage = new Message({\n        senderInfo: `${message.senderInfo._id}`,\n        text: message.text,\n        chatRoomId: message.chatRoomId\n      });\n\n      // Save the message to the database\n      await newMessage.save();\n      console.log('Message saved to the database');\n      socket.join(message.chatRoomId)\n      // Broadcast the message to all connected clients\n      socket.to(message.chatRoomId).emit('receive_message', newMessage);\n    } catch (error) {\n      console.error('Error handling message:', error);\n    }\n    \n  });\n   // Handle 'pong' messages\n   socket.on('pong', () => {\n    // You can optionally log or perform actions upon receiving a 'pong' message.\n    console.log(\"ping pong connection on\")\n  });\n  // Handle disconnections\n  socket.on('disconnect', () => {\n    console.log(`User disconnected: ${socket.id}`);\n    // Remove the socket from the active connections map\n    // activeConnections.delete(socket);\n  });\n});"],"names":[],"sourceRoot":""}